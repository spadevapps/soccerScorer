//texprojectR.js
// Authors: Meghan Cobb, Sam Appleton, Alex Zhang
//Course: CSCI343
//Date: 12/8/19
//Purpose: Create a simulated soccer game, where the user can kick from
//         multiple locations against a goalie.

"use strict";

var canvas;
var gl;
var go = true;
var score = 0;


var ballLoc = 1;
var ballX = 0;
var ballY = -90;
var ballZ = 30;
var kicked = false;
var count = 0;
var locOne = true;
var locTwo = false;
var locThree = false;

var pointsArray = [];
var texCoordsArray = [];
var texture = [];
var ballCoords = [];
var colors = [];
var deltaX = 0;
var deltaY = 0;
var deltaZ = 0;

var location;
var shooterLocation = [];
var goalieMatrix;

var xAxis = 0;
var yAxis = 1;
var zAxis = 2;


var texCoord = [vec2(0, 0), vec2(0, 1), vec2(1, 1), vec2(1, 0)];

var image = [];

var numTimesToSubdivide = 5;




var index = 0;

var vertices = [
  vec3(-100.0, -100.0, 100.0), //0
  vec3(-100.0, 100.0, 100.0), //1
  vec3(100.0, 100.0, 100.0), //2
  vec3(100.0, -100.0, 100.0), //3
  vec3(-100.0, -100.0, -100.0), //4
  vec3(-100.0, 100.0, -100.0), //5
  vec3(100.0, 100.0, -100.0), //6
  vec3(100.0, -100.0, -100.0), //7

  vec3(-1.75, -98, -90), //8 -> 0
  vec3(-1.75, -90, -90), //9 -> 1
  vec3(1.75, -90, -90), //10 -> 2
  vec3(1.75, -98, -90), //11 -> 3
  vec3(-1.75, -98, -95), //12 -> 4
  vec3(-1.75, -90, -95), //13 -> 5
  vec3(1.75, -90, -95), //14 -> 6
  vec3(1.75, -98, -95), //15 -> 7

  vec3(-15, -99, -90), //16 -> 0
  vec3(-15, -80, -90), //17 -> 1
  vec3(15, -80, -90), //18 -> 2
  vec3(15, -99, -90), //19 -> 3
  vec3(-15, -99, -98), //20 -> 4
  vec3(-15, -80, -98), //21 -> 5
  vec3(15, -80, -98), //22 -> 6
  vec3(15, -99, -98), //23 -> 7


  vec3(-5, -5, 5), //24 -> 0
  vec3(-5, 5, 5), //25 -> 1
  vec3(5, 5, 5), //26 -> 2
  vec3(5, -5, 5), //27 -> 3
  vec3(-5, -5, -5), //28 -> 4
  vec3(-5, 5, -5), //29 -> 5
  vec3(5, 5, -5), //30 -> 6
  vec3(5, -5, -5), //31 -> 7
 

];




var axis = 0;
var theta = [0, 0, 0];
var goalMax = 10;
var goalMin = -10;
var goalyMv = .25;
var goaliePos = 0;
var program;
var mvMatrix, pMatrix;
var modelView, projection;
var thetaLoc;



//Set up texture and assign parameters
function configureTexture(image, id) {
  texture[id] = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture[id]);
  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB,
    gl.RGB, gl.UNSIGNED_BYTE, image);
  gl.generateMipmap(gl.TEXTURE_2D);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER,
    gl.NEAREST_MIPMAP_LINEAR);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
  gl.useProgram(program)
  gl.uniform1i(gl.getUniformLocation(program, "texture"), 0);
}

//Set up vertices and render a quadrilateral with vertices a,b,c,d and
//associated texture coordinates
function quad(a, b, c, d) {
  pointsArray.push(vertices[a]);
  texCoordsArray.push(texCoord[2]);

  pointsArray.push(vertices[b]);
  texCoordsArray.push(texCoord[3]);

  pointsArray.push(vertices[c]);
  texCoordsArray.push(texCoord[0]);

  pointsArray.push(vertices[a]);
  texCoordsArray.push(texCoord[2]);

  pointsArray.push(vertices[c]);
  texCoordsArray.push(texCoord[0]);

  pointsArray.push(vertices[d]);
  texCoordsArray.push(texCoord[1]);
}



//set up order of vertices for 6 sides of a cube
function textureCube() {

  //border
  quad(2, 3, 0, 1); //top
  quad(6, 7, 3, 2); //side
  quad(7, 4, 0, 3); //side
  quad(2, 1, 5, 6); //side
  quad(7, 6, 5, 4); //side
  quad(1, 0, 4, 5); //bottom

  //goalie
  quad(9, 8, 11, 10);
  quad(10, 11, 15, 14);
  quad(11, 8, 12, 15);
  quad(14, 13, 9, 10);
  quad(12, 13, 14, 15);
  quad(13, 12, 8, 9);

  //goal
  //quad(17, 16, 19, 18); //top, don't render
  quad(18, 19, 23, 22);
  quad(19, 16, 20, 23);
  quad(22, 21, 17, 18);
  quad(20, 21, 22, 23);
  quad(21, 20, 16, 17);

  //ball
  quad(25, 24, 27, 26); //top
  quad(26, 27, 31, 30);
  quad(27, 24, 28, 31);
  quad(30, 29, 25, 26);
  quad(28, 29, 30, 31);
  quad(29, 28, 24, 25);



}




window.onload = function init() {
  canvas = document.getElementById("gl-canvas");

  gl = WebGLUtils.setupWebGL(canvas);
  if (!gl) {
    alert("WebGL isn't available");
  }


  gl.viewport(0, 0, canvas.width, canvas.height);
  gl.clearColor(1.0, 1.0, 1.0, 1.0);

  gl.enable(gl.DEPTH_TEST);

  //
  //  Load shaders and initialize attribute buffers
  //
  program = initShaders(gl, "vertex-shader", "fragment-shader");
  gl.useProgram(program);

  textureCube();

  var vBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, vBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, flatten(pointsArray), gl.STATIC_DRAW);

  var vPosition = gl.getAttribLocation(program, "vPosition");
  gl.vertexAttribPointer(vPosition, 3, gl.FLOAT, false, 0, 0);
  gl.enableVertexAttribArray(vPosition);


  var tBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, tBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, flatten(texCoordsArray), gl.STATIC_DRAW);

  var vTexCoord = gl.getAttribLocation(program, "vTexCoord");
  gl.vertexAttribPointer(vTexCoord, 2, gl.FLOAT, false, 0, 0);
  gl.enableVertexAttribArray(vTexCoord);

  //Initialize textures
  initializeTexture(image, "fans3.jpeg", 0);
  initializeTexture(image, "fans3.jpeg", 1);
  initializeTexture(image, "grass.jpg", 2);
  initializeTexture(image, "sky.jpg", 3);
  initializeTexture(image, "fans2.jpeg", 4);
  initializeTexture(image, "fans3.jpeg", 5);
  initializeTexture(image, "soccer.png", 6);
  initializeTexture(image, "goal.png", 7);
  initializeTexture(image, "ball.jpg", 8);

  modelView = gl.getUniformLocation(program, "modelView");
  projection = gl.getUniformLocation(program, "projection");
  pMatrix = perspective(45, .25, 50, 500);
  gl.uniformMatrix4fv(projection, false, flatten(pMatrix));



  window.onkeydown = keyResponse;


  document.getElementById("loc1").onclick = loc1;
  document.getElementById("loc2").onclick = loc2;
  document.getElementById("loc3").onclick = loc3;
  document.getElementById("kick").onclick = kick;
  document.getElementById("reset").onclick = reset;
  var lblScore = document.getElementById('lblScore');
  lblScore.innerHTML = score;

  render();
}

//set location 1 translations for the ball and make goalie move
function loc1(event) {
  locOne = true;
  locTwo = false;
  locThree = false;
  ballLoc = 1;
  ballX = 0;
  ballY = -90;
  ballZ = 30;
  go = true;
  kicked = false;
}

////set location 2 translations for the ball and make goalie move
function loc2(event) {
  locOne = false;
  locTwo = true;
  locThree = false;
  ballLoc = 2;
  ballX = 8;
  ballY = -90;
  ballZ = 30;
  go = true;
  kicked = false;
}

//set location 3 translations for the ball and make goalie move
function loc3(event) {
  locOne = false;
  locTwo = false;
  locThree = true;
  ballLoc = 3;
  ballX = -8;
  ballY = -90;
  ballZ = 30;
  go = true;
  kicked = false;
}

//set location to 1, make the goalie move, and make the score 0
function reset(event) {
  locOne = true;
  ballLoc = 1;
  ballX = 0;
  ballY = -90;
  ballZ = 30;
  go = true;
  score = 0;
  kicked = false;
  lblScore.innerHTML = score;

}

//check which location the ball was shot from and move the ball towards the goal
function kick(event) {
  kicked = true;
}

//if the goalie is within the middle of the goal (x position between 3 and -3) then its a goal
//make an alert if its a goal and increase the score
function isGoal() {
  if (goaliePos < -3 || goaliePos > 3) {
    score++;
    lblScore.innerHTML = score;
    alert("Goal!");
  }

}

//move the camera
function keyResponse(event) {
  var key = String.fromCharCode(event.keyCode);
  switch (key) {
    case '1':
      axis = xAxis;
      theta[axis] += 2.0;
      break;
    case '2':
      axis = xAxis;
      theta[axis] -= 2.0;
      break;
    case '3':
      axis = yAxis;
      theta[axis] += 2.0;
      break;
    case '4':
      axis = yAxis;
      theta[axis] -= 2.0;
      break;
    case '5':
      axis = zAxis;
      theta[axis] += 2.0;
      break;
    case '6':
      axis = zAxis;
      theta[axis] -= 2.0;
      break;
    case 'R':
      deltaX -= 5;
      break;
    case 'L':
      deltaX += 5;
      break;
    case 'U':
      deltaY -= 5;
      break;
    case 'D':
      deltaY += 5;
      break;
    case 'F':
      deltaZ += 5;
      break;
    case 'B':
      deltaZ -= 5;
      break;
  }
}


//read in an image from fileName. Set is up as a texture and configure
//the parameters. Give it an id for future reference.
function initializeTexture(myImage, fileName, id) {
  myImage[id] = new Image();
  myImage[id].onload = function() {
    configureTexture(myImage[id], id);
  }
  //myImage[id].crossOrigin = "anonymous";
  myImage[id].src = fileName;
}

//determine goalie position
function goalieMv(go) {

  if (go == true) {
    var goalyCheck = 1;
    if (goaliePos == goalMax || goaliePos == goalMin) {
      goalyCheck = -1
    } else {
      goalyCheck = 1
    }
    goalyMv *= goalyCheck;
    goaliePos += goalyMv;
  }

}




function render() {
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);


  var mvMatrix = mat4();
  mvMatrix = mult(mvMatrix, translate(0, 0, -150));
  mvMatrix = mult(mvMatrix, translate(0, 50, 0));
  mvMatrix = mult(mvMatrix, translate(deltaX, deltaY, deltaZ));
  mvMatrix = mult(mvMatrix, rotate(theta[0], 1.0, 0.0, 0.0));
  mvMatrix = mult(mvMatrix, rotate(theta[1], 0.0, 1.0, 0.0));
  mvMatrix = mult(mvMatrix, rotate(theta[2], 0.0, 0.0, 1.0));



  gl.uniformMatrix4fv(modelView, false, flatten(mvMatrix));
  for (var i = 0; i < 6; i++) {
    gl.bindTexture(gl.TEXTURE_2D, texture[i]);
    gl.drawArrays(gl.TRIANGLES, i * 6, 6);
  }

  //goalie
  goalieMv(go);
  goalieMatrix = mat4();
  goalieMatrix = mult(goalieMatrix, mvMatrix);
  goalieMatrix = mult(goalieMatrix, translate(goaliePos, 0.0, 0.0));
  gl.uniformMatrix4fv(modelView, false, flatten(goalieMatrix));
  gl.bindTexture(gl.TEXTURE_2D, texture[6]);
  gl.drawArrays(gl.TRIANGLES, 36, 36);


  //goal
  var goalMatrix = mat4()
  goalMatrix = mult(goalMatrix, mvMatrix);
  goalMatrix = mult(goalMatrix, translate(0, 0, 0));
  gl.uniformMatrix4fv(modelView, false, flatten(goalMatrix));
  gl.bindTexture(gl.TEXTURE_2D, texture[7]);
  gl.drawArrays(gl.TRIANGLES, 72, 30);





  //ball
  if (kicked == true && ballZ == -70) {
    if (ballZ == -70) {
      go = false;
      isGoal();
      loc1();
    }
  } else if (kicked == true) {
    if (locOne == true) {
      ballZ -= 2;
      ballY += .05;

    } else if (locTwo == true) {
      ballZ -= 2;
      ballY += .05;
      ballX -= .16;
    } else {
      ballZ -= 2;
      ballY += .05;
      ballX += .16;
    }
  } else {
    //do nothing

  }

  var ballMatrix = mat4()
  ballMatrix = mult(ballMatrix, mvMatrix);
  ballMatrix = mult(ballMatrix, translate(ballX, ballY, ballZ));
  ballMatrix = mult(ballMatrix, scalem(0.5, 0.5, 0.5));
  gl.uniformMatrix4fv(modelView, false, flatten(ballMatrix));
  for (var i = 0; i < 6; i++) {
    gl.bindTexture(gl.TEXTURE_2D, texture[8]);
    gl.drawArrays(gl.TRIANGLES, i * 6 + 102, 6);
  }




  requestAnimFrame(render);
}